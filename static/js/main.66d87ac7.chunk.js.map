{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/contact.js","components/projects.js","components/resume.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","sytle","width","margin","className","col","src","alt","href","rel","target","class","aria-hidden","Component","About","Contact","Projects","props","state","activeTab","this","shadow","style","minWidth","color","height","background","border","colored","name","onChange","tabId","setState","ripple","toggleCategories","Resume","Main","exact","path","component","App","title","scroll","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66d87ac7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Cell } from 'react-mdl';\n\nclass LandingPage extends Component {\n    render() {\n        return (\n            <div sytle={{width: '100%', margin: 'auto'}}>\n                <Grid className=\"landingGrid\">\n                    <Cell col={12}>\n                        <img \n                            src=\"https://cdn1.iconfinder.com/data/icons/user-pictures/101/malecostume-512.png\"\n                            alt=\"avatar\"\n                            className=\"avatar-img\"\n                        />\n                        <div className=\"banner-text\">\n                            <h1>Full Stack Software Engineer</h1>\n                            <hr/>\n                            <p>Angular | NodeJS | React | Javascript | Java | C/C++ | Python | R</p>\n                            <div className=\"social-links\">\n                                {/* GitHub */}\n                                <a href=\"https://github.com/JorgeRubio96\"  rel=\"noopener noreferrer\"  target=\"_blank\">\n                                    <i class=\"fa fa-github-square\" aria-hidden=\"true\"/>\n                                </a>\n                                {/* Linkedin */}\n                                <a href=\"https://www.linkedin.com/in/jorge-emilio-rubio-barboza-840211143/\"  rel=\"noopener noreferrer\"  target=\"_blank\">\n                                 <i class=\"fa fa-linkedin-square\" aria-hidden=\"true\"/>\n                                </a>\n                                {/* GitHub */}\n                                <a href=\"https://github.com/JorgeRubio96\"  rel=\"noopener noreferrer\"  target=\"_blank\">\n                                    <i class=\"fa fa-github-square\" aria-hidden=\"true\"/>\n                                </a>\n                                {/* Linkedin */}\n                                <a href=\"https://www.linkedin.com/in/jorge-emilio-rubio-barboza-840211143/\"  rel=\"noopener noreferrer\"  target=\"_blank\">\n                                 <i class=\"fa fa-linkedin-square\" aria-hidden=\"true\"/>\n                                </a>\n                            </div>\n                        </div>\n                    </Cell>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;","import React, { Component } from 'react';\n\nclass About extends Component {\n    render() {\n        return (\n            <div><h1>About Me Page</h1></div>\n        );\n    }\n}\n\nexport default About;","import React, { Component } from 'react';\n\nclass Contact extends Component {\n    render() {\n        return (\n            <div><h1>Contact Page</h1></div>\n        );\n    }\n}\n\nexport default Contact;","import React, { Component } from 'react';\nimport { Tabs, Tab, Grid, Cell, Card, CardTitle, CardActions, Button, CardMenu, IconButton, CardText } from 'react-mdl';\n\nclass Projects extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { activeTab:0 };\n    }\n\n    toggleCategories() {\n        if(this.state.activeTab === 0) {\n            return(\n                <div className=\"projects-grid\">\n                    {/* Project 1*/}\n                    <Card shadow={5} style={{minWidth: '450', margin: 'auto'}}>\n                        <CardTitle style={{color: '#fff', height:'176px', background: 'url(https://www.trishanatechnologies.com/images/course24.jpg) center / cover' }}>Grease Lang</CardTitle>\n                        <CardText>\n                            Grease programming language, little compiler project based in python, with C based Virtual Machine\n                        </CardText>\n                        <CardActions border>\n                            <Button href=\"https://github.com/JorgeRubio96/grease-lang/tree/master/vm\" rel=\"noopener noreferrer\"  target=\"_blank\" colored>GitHub</Button>\n                        </CardActions>\n                        <CardMenu style={{color: '#fff'}}>\n                            <IconButton name=\"share\"/>\n                        </CardMenu>\n                    </Card>\n                </div>\n            )\n        } else if(this.state.activeTab === 1) {\n            return(\n                <div className=\"projects-grid\">\n                    {/* Project 1*/}\n                    <Card shadow={5} style={{minWidth: '450', margin: 'auto'}}>\n                        <CardTitle style={{color: '#fff', height:'176px', background: 'url(https://rosolutions.com.mx/blog/wp-content/uploads/2019/06/1-y6C4nSvy2Woe0m7bWEn4BA.png) center / cover' }}>Resume App</CardTitle>\n                        <CardText>\n                            This is a little project to display my information to employers in a more dynamic and fun way\n                        </CardText>\n                        <CardActions border>\n                            <Button href=\"https://github.com/JorgeRubio96/Resume\" rel=\"noopener noreferrer\"  target=\"_blank\" colored>GitHub</Button>\n                            <Button href=\"http://jorgerubio96.github.io/Resume/\" rel=\"noopener noreferrer\"  target=\"_blank\" colored>LiveDemo</Button>\n                        </CardActions>\n                        <CardMenu style={{color: '#fff'}}>\n                            <IconButton name=\"share\"/>\n                        </CardMenu>\n                    </Card>\n                </div>\n            )\n        } else if(this.state.activeTab === 2) {\n            return(\n                <div className=\"projects-grid\">\n                    {/* Project 1*/}\n                    <Card shadow={5} style={{minWidth: '450', margin: 'auto'}}>\n                        <CardTitle style={{color: '#fff', height:'176px', background: 'url(http://www.ingenioteka.com/wp-content/uploads/2018/04/python-logo.png) center / cover' }}>Grease Lang</CardTitle>\n                        <CardText>\n                            Grease programming language, little compiler project based in python\n                        </CardText>\n                        <CardActions border>\n                            <Button href=\"https://github.com/JorgeRubio96/grease-lang\" rel=\"noopener noreferrer\"  target=\"_blank\" colored>GitHub</Button>\n                        </CardActions>\n                        <CardMenu style={{color: '#fff'}}>\n                            <IconButton name=\"share\"/>\n                        </CardMenu>\n                    </Card>\n                </div>\n            )\n        }\n    }\n    render() {\n        return (\n            <div className=\"category-tabs\">\n                <Tabs activeTab={this.state.activeTab} onChange={(tabId) => this.setState({activeTab: tabId })} ripple>\n                    <Tab>C/C++</Tab>\n                    <Tab>React</Tab>\n                    <Tab>Python</Tab>\n                </Tabs>\n                <Grid>\n                    <Cell col={12}>\n                        <div className=\"content\">{this.toggleCategories()}</div>\n                    </Cell>\n                </Grid>\n            </div>\n        );\n    }\n}\nexport default Projects;\n","import React, { Component } from 'react';\n\nclass Resume extends Component {\n    render() {\n        return (\n            <div><h1>Resume Page</h1></div>\n        );\n    }\n}\n\nexport default Resume;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport LandingPage from './landingpage';\nimport About from './aboutme';\nimport Contact from './contact';\nimport Projects  from './projects';\nimport Resume from './resume';\n\nconst Main = () => (\n    <Switch>\n        <Route exact path=\"/resume\" component={LandingPage}></Route>\n        <Route path=\"/resume/aboutme\" component={About}></Route>\n        <Route path=\"/resume/contact\" component={Contact}></Route>\n        <Route path=\"/resume/projects\" component={Projects}></Route>\n        <Route path=\"/resume/resume\" component={Resume}></Route>\n    </Switch>\n\n)\n \nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl'; \nimport Main from './components/main';\nimport { Link } from 'react-router-dom';\nclass App extends Component{\n  render() {\n    return (\n      <div className=\"demo-big-content\">\n          <Layout>\n              <Header className=\"header-color\" title=\"Title\" scroll>\n                  <Navigation>\n                      <Link to=\"/Resume/resume\">Resume</Link>\n                      <Link to=\"/Resume/projects\">Projects</Link>\n                      <Link to=\"/Resume/aboutme\">About Me</Link>\n                      <Link to=\"/Resume/contact\">Contact</Link>\n                  </Navigation>\n              </Header>\n              <Drawer title=\"Title\">\n                  <Navigation>\n                    <Link to=\"/Resume/resume\">Resume</Link>\n                    <Link to=\"/Resume/projects\">Projects</Link>\n                    <Link to=\"/Resume/aboutme\">About Me</Link>\n                    <Link to=\"/Resume/contact\">Contact</Link>\n                  </Navigation>\n              </Drawer>\n              <Content>\n                  <div className=\"page-content\" />\n                  <Main/>\n              </Content>\n          </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n   , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}